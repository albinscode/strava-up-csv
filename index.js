var request = require('request');
var strava = require('strava-v3');
var moment = require('moment');
var querystring = require('querystring');
//require('request-debug')(request);

/*
strava.athlete.get({},function(err,payload) {
    if(!err) {
        console.log(payload);
    }
    else {
        console.log(err);
    }
});
*/

/**
 * TODO make a small improvment by using inquirer to request for the code fetch
 * and then update the strava_config.
 */
function generateNewToken() {
    // Generates the url to have full access
    var url = strava.oauth.getRequestAccessURL({
      scope:"view_private,write"
    });
    // We have to grab the code manually in the browser and then copy/paste it into strava_config as "access_token"
    console.log('url is ' + url);
    // Code to paste
    var code = "";
    strava.oauth.getToken(code,function(err, token) {
        console.log(token);
    });
}

var startDate = moment().add(-50, 'days');
var endDate = moment().add(-10, 'days');

console.log (typeof startDate.valueOf());
console.log (startDate.valueOf());

strava.athlete.listActivities({after: startDate.unix(), before: endDate.unix() }, function(error, activities) {
//strava.athlete.listActivities({}, function(error, activities) {
    if (error) console.log('error is ' + error);//throw Error(error);
    //console.log(JSON.stringify(activities));

    //if (activities.keys().length > 0)
    Object.keys(activities).forEach(function(key) {
        console.log(activities[key]);
    });

   return;
    strava.activities.create(
        {
            name: 'autogenerated',
            type: 'Ride',
            start_date_local: moment().format(),
            elapsed_time: 30 * 60,
            description: 'test',
            distance: 13.3,
            commute: 1,
        },
        function (error, success) {
            if (error) throw error;
            console.log(success);
        }
    );
});

